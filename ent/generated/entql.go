// Code generated by ent, DO NOT EDIT.

package generated

import (
	"entgo.io/bug/ent/generated/one"
	"entgo.io/bug/ent/generated/two"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   one.Table,
			Columns: one.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: one.FieldID,
			},
		},
		Type: "One",
		Fields: map[string]*sqlgraph.FieldSpec{
			one.FieldSomething: {Type: field.TypeString, Column: one.FieldSomething},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   two.Table,
			Columns: two.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: two.FieldID,
			},
		},
		Type: "Two",
		Fields: map[string]*sqlgraph.FieldSpec{
			two.FieldSomething: {Type: field.TypeString, Column: two.FieldSomething},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (oq *OneQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OneQuery builder.
func (oq *OneQuery) Filter() *OneFilter {
	return &OneFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OneMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OneMutation builder.
func (m *OneMutation) Filter() *OneFilter {
	return &OneFilter{config: m.config, predicateAdder: m}
}

// OneFilter provides a generic filtering capability at runtime for OneQuery.
type OneFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OneFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OneFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(one.FieldID))
}

// WhereSomething applies the entql string predicate on the something field.
func (f *OneFilter) WhereSomething(p entql.StringP) {
	f.Where(p.Field(one.FieldSomething))
}

// addPredicate implements the predicateAdder interface.
func (tq *TwoQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TwoQuery builder.
func (tq *TwoQuery) Filter() *TwoFilter {
	return &TwoFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TwoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TwoMutation builder.
func (m *TwoMutation) Filter() *TwoFilter {
	return &TwoFilter{config: m.config, predicateAdder: m}
}

// TwoFilter provides a generic filtering capability at runtime for TwoQuery.
type TwoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TwoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TwoFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(two.FieldID))
}

// WhereSomething applies the entql string predicate on the something field.
func (f *TwoFilter) WhereSomething(p entql.StringP) {
	f.Where(p.Field(two.FieldSomething))
}
