// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/generated/one"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OneCreate is the builder for creating a One entity.
type OneCreate struct {
	config
	mutation *OneMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSomething sets the "something" field.
func (oc *OneCreate) SetSomething(s string) *OneCreate {
	oc.mutation.SetSomething(s)
	return oc
}

// Mutation returns the OneMutation object of the builder.
func (oc *OneCreate) Mutation() *OneMutation {
	return oc.mutation
}

// Save creates the One in the database.
func (oc *OneCreate) Save(ctx context.Context) (*One, error) {
	var (
		err  error
		node *One
	)
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*One)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OneMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OneCreate) SaveX(ctx context.Context) *One {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OneCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OneCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OneCreate) check() error {
	if _, ok := oc.mutation.Something(); !ok {
		return &ValidationError{Name: "something", err: errors.New(`generated: missing required field "One.something"`)}
	}
	if v, ok := oc.mutation.Something(); ok {
		if err := one.SomethingValidator(v); err != nil {
			return &ValidationError{Name: "something", err: fmt.Errorf(`generated: validator failed for field "One.something": %w`, err)}
		}
	}
	return nil
}

func (oc *OneCreate) sqlSave(ctx context.Context) (*One, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *OneCreate) createSpec() (*One, *sqlgraph.CreateSpec) {
	var (
		_node = &One{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: one.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: one.FieldID,
			},
		}
	)
	_spec.Schema = oc.schemaConfig.One
	_spec.OnConflict = oc.conflict
	if value, ok := oc.mutation.Something(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: one.FieldSomething,
		})
		_node.Something = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.One.Create().
//		SetSomething(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OneUpsert) {
//			SetSomething(v+v).
//		}).
//		Exec(ctx)
func (oc *OneCreate) OnConflict(opts ...sql.ConflictOption) *OneUpsertOne {
	oc.conflict = opts
	return &OneUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.One.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OneCreate) OnConflictColumns(columns ...string) *OneUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OneUpsertOne{
		create: oc,
	}
}

type (
	// OneUpsertOne is the builder for "upsert"-ing
	//  one One node.
	OneUpsertOne struct {
		create *OneCreate
	}

	// OneUpsert is the "OnConflict" setter.
	OneUpsert struct {
		*sql.UpdateSet
	}
)

// SetSomething sets the "something" field.
func (u *OneUpsert) SetSomething(v string) *OneUpsert {
	u.Set(one.FieldSomething, v)
	return u
}

// UpdateSomething sets the "something" field to the value that was provided on create.
func (u *OneUpsert) UpdateSomething() *OneUpsert {
	u.SetExcluded(one.FieldSomething)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.One.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OneUpsertOne) UpdateNewValues() *OneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.One.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OneUpsertOne) Ignore() *OneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OneUpsertOne) DoNothing() *OneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OneCreate.OnConflict
// documentation for more info.
func (u *OneUpsertOne) Update(set func(*OneUpsert)) *OneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OneUpsert{UpdateSet: update})
	}))
	return u
}

// SetSomething sets the "something" field.
func (u *OneUpsertOne) SetSomething(v string) *OneUpsertOne {
	return u.Update(func(s *OneUpsert) {
		s.SetSomething(v)
	})
}

// UpdateSomething sets the "something" field to the value that was provided on create.
func (u *OneUpsertOne) UpdateSomething() *OneUpsertOne {
	return u.Update(func(s *OneUpsert) {
		s.UpdateSomething()
	})
}

// Exec executes the query.
func (u *OneUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OneCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OneUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OneUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OneUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OneCreateBulk is the builder for creating many One entities in bulk.
type OneCreateBulk struct {
	config
	builders []*OneCreate
	conflict []sql.ConflictOption
}

// Save creates the One entities in the database.
func (ocb *OneCreateBulk) Save(ctx context.Context) ([]*One, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*One, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OneCreateBulk) SaveX(ctx context.Context) []*One {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OneCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OneCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.One.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OneUpsert) {
//			SetSomething(v+v).
//		}).
//		Exec(ctx)
func (ocb *OneCreateBulk) OnConflict(opts ...sql.ConflictOption) *OneUpsertBulk {
	ocb.conflict = opts
	return &OneUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.One.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OneCreateBulk) OnConflictColumns(columns ...string) *OneUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OneUpsertBulk{
		create: ocb,
	}
}

// OneUpsertBulk is the builder for "upsert"-ing
// a bulk of One nodes.
type OneUpsertBulk struct {
	create *OneCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.One.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OneUpsertBulk) UpdateNewValues() *OneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.One.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OneUpsertBulk) Ignore() *OneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OneUpsertBulk) DoNothing() *OneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OneCreateBulk.OnConflict
// documentation for more info.
func (u *OneUpsertBulk) Update(set func(*OneUpsert)) *OneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OneUpsert{UpdateSet: update})
	}))
	return u
}

// SetSomething sets the "something" field.
func (u *OneUpsertBulk) SetSomething(v string) *OneUpsertBulk {
	return u.Update(func(s *OneUpsert) {
		s.SetSomething(v)
	})
}

// UpdateSomething sets the "something" field to the value that was provided on create.
func (u *OneUpsertBulk) UpdateSomething() *OneUpsertBulk {
	return u.Update(func(s *OneUpsert) {
		s.UpdateSomething()
	})
}

// Exec executes the query.
func (u *OneUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the OneCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for OneCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OneUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
