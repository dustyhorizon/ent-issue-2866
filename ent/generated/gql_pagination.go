// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/bug/ent/generated/one"
	"entgo.io/bug/ent/generated/two"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// OneEdge is the edge representation of One.
type OneEdge struct {
	Node   *One   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// OneConnection is the connection containing edges to One.
type OneConnection struct {
	Edges      []*OneEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *OneConnection) build(nodes []*One, pager *onePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *One
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *One {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *One {
			return nodes[i]
		}
	}
	c.Edges = make([]*OneEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OneEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OnePaginateOption enables pagination customization.
type OnePaginateOption func(*onePager) error

// WithOneOrder configures pagination ordering.
func WithOneOrder(order *OneOrder) OnePaginateOption {
	if order == nil {
		order = DefaultOneOrder
	}
	o := *order
	return func(pager *onePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOneOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOneFilter configures pagination filter.
func WithOneFilter(filter func(*OneQuery) (*OneQuery, error)) OnePaginateOption {
	return func(pager *onePager) error {
		if filter == nil {
			return errors.New("OneQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type onePager struct {
	order  *OneOrder
	filter func(*OneQuery) (*OneQuery, error)
}

func newOnePager(opts []OnePaginateOption) (*onePager, error) {
	pager := &onePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOneOrder
	}
	return pager, nil
}

func (p *onePager) applyFilter(query *OneQuery) (*OneQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *onePager) toCursor(o *One) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *onePager) applyCursors(query *OneQuery, after, before *Cursor) *OneQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOneOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *onePager) applyOrder(query *OneQuery, reverse bool) *OneQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOneOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOneOrder.Field.field))
	}
	return query
}

func (p *onePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOneOrder.Field {
			b.Comma().Ident(DefaultOneOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to One.
func (o *OneQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OnePaginateOption,
) (*OneConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOnePager(opts)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OneConnection{Edges: []*OneEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = o.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	o = pager.applyCursors(o, after, before)
	o = pager.applyOrder(o, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OneOrderField defines the ordering field of One.
type OneOrderField struct {
	field    string
	toCursor func(*One) Cursor
}

// OneOrder defines the ordering of One.
type OneOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *OneOrderField `json:"field"`
}

// DefaultOneOrder is the default ordering of One.
var DefaultOneOrder = &OneOrder{
	Direction: OrderDirectionAsc,
	Field: &OneOrderField{
		field: one.FieldID,
		toCursor: func(o *One) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts One into OneEdge.
func (o *One) ToEdge(order *OneOrder) *OneEdge {
	if order == nil {
		order = DefaultOneOrder
	}
	return &OneEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// TwoEdge is the edge representation of Two.
type TwoEdge struct {
	Node   *Two   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TwoConnection is the connection containing edges to Two.
type TwoConnection struct {
	Edges      []*TwoEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *TwoConnection) build(nodes []*Two, pager *twoPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Two
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Two {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Two {
			return nodes[i]
		}
	}
	c.Edges = make([]*TwoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TwoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TwoPaginateOption enables pagination customization.
type TwoPaginateOption func(*twoPager) error

// WithTwoOrder configures pagination ordering.
func WithTwoOrder(order *TwoOrder) TwoPaginateOption {
	if order == nil {
		order = DefaultTwoOrder
	}
	o := *order
	return func(pager *twoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTwoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTwoFilter configures pagination filter.
func WithTwoFilter(filter func(*TwoQuery) (*TwoQuery, error)) TwoPaginateOption {
	return func(pager *twoPager) error {
		if filter == nil {
			return errors.New("TwoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type twoPager struct {
	order  *TwoOrder
	filter func(*TwoQuery) (*TwoQuery, error)
}

func newTwoPager(opts []TwoPaginateOption) (*twoPager, error) {
	pager := &twoPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTwoOrder
	}
	return pager, nil
}

func (p *twoPager) applyFilter(query *TwoQuery) (*TwoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *twoPager) toCursor(t *Two) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *twoPager) applyCursors(query *TwoQuery, after, before *Cursor) *TwoQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTwoOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *twoPager) applyOrder(query *TwoQuery, reverse bool) *TwoQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTwoOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTwoOrder.Field.field))
	}
	return query
}

func (p *twoPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTwoOrder.Field {
			b.Comma().Ident(DefaultTwoOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Two.
func (t *TwoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TwoPaginateOption,
) (*TwoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTwoPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TwoConnection{Edges: []*TwoEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TwoOrderField defines the ordering field of Two.
type TwoOrderField struct {
	field    string
	toCursor func(*Two) Cursor
}

// TwoOrder defines the ordering of Two.
type TwoOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *TwoOrderField `json:"field"`
}

// DefaultTwoOrder is the default ordering of Two.
var DefaultTwoOrder = &TwoOrder{
	Direction: OrderDirectionAsc,
	Field: &TwoOrderField{
		field: two.FieldID,
		toCursor: func(t *Two) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Two into TwoEdge.
func (t *Two) ToEdge(order *TwoOrder) *TwoEdge {
	if order == nil {
		order = DefaultTwoOrder
	}
	return &TwoEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}
