// Code generated by ent, DO NOT EDIT.

package one

import (
	"entgo.io/bug/ent/generated/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Something applies equality check predicate on the "something" field. It's identical to SomethingEQ.
func Something(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSomething), v))
	})
}

// SomethingEQ applies the EQ predicate on the "something" field.
func SomethingEQ(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSomething), v))
	})
}

// SomethingNEQ applies the NEQ predicate on the "something" field.
func SomethingNEQ(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSomething), v))
	})
}

// SomethingIn applies the In predicate on the "something" field.
func SomethingIn(vs ...string) predicate.One {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSomething), v...))
	})
}

// SomethingNotIn applies the NotIn predicate on the "something" field.
func SomethingNotIn(vs ...string) predicate.One {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSomething), v...))
	})
}

// SomethingGT applies the GT predicate on the "something" field.
func SomethingGT(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSomething), v))
	})
}

// SomethingGTE applies the GTE predicate on the "something" field.
func SomethingGTE(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSomething), v))
	})
}

// SomethingLT applies the LT predicate on the "something" field.
func SomethingLT(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSomething), v))
	})
}

// SomethingLTE applies the LTE predicate on the "something" field.
func SomethingLTE(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSomething), v))
	})
}

// SomethingContains applies the Contains predicate on the "something" field.
func SomethingContains(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSomething), v))
	})
}

// SomethingHasPrefix applies the HasPrefix predicate on the "something" field.
func SomethingHasPrefix(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSomething), v))
	})
}

// SomethingHasSuffix applies the HasSuffix predicate on the "something" field.
func SomethingHasSuffix(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSomething), v))
	})
}

// SomethingEqualFold applies the EqualFold predicate on the "something" field.
func SomethingEqualFold(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSomething), v))
	})
}

// SomethingContainsFold applies the ContainsFold predicate on the "something" field.
func SomethingContainsFold(v string) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSomething), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.One) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.One) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.One) predicate.One {
	return predicate.One(func(s *sql.Selector) {
		p(s.Not())
	})
}
