// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"

	"entgo.io/bug/ent/generated/migrate"

	"entgo.io/bug/ent/generated/one"
	"entgo.io/bug/ent/generated/two"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// One is the client for interacting with the One builders.
	One *OneClient
	// Two is the client for interacting with the Two builders.
	Two *TwoClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.One = NewOneClient(c.config)
	c.Two = NewTwoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("generated: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		One:    NewOneClient(cfg),
		Two:    NewTwoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		One:    NewOneClient(cfg),
		Two:    NewTwoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		One.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.One.Use(hooks...)
	c.Two.Use(hooks...)
}

// OneClient is a client for the One schema.
type OneClient struct {
	config
}

// NewOneClient returns a client for the One from the given config.
func NewOneClient(c config) *OneClient {
	return &OneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `one.Hooks(f(g(h())))`.
func (c *OneClient) Use(hooks ...Hook) {
	c.hooks.One = append(c.hooks.One, hooks...)
}

// Create returns a builder for creating a One entity.
func (c *OneClient) Create() *OneCreate {
	mutation := newOneMutation(c.config, OpCreate)
	return &OneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of One entities.
func (c *OneClient) CreateBulk(builders ...*OneCreate) *OneCreateBulk {
	return &OneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for One.
func (c *OneClient) Update() *OneUpdate {
	mutation := newOneMutation(c.config, OpUpdate)
	return &OneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OneClient) UpdateOne(o *One) *OneUpdateOne {
	mutation := newOneMutation(c.config, OpUpdateOne, withOne(o))
	return &OneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OneClient) UpdateOneID(id int) *OneUpdateOne {
	mutation := newOneMutation(c.config, OpUpdateOne, withOneID(id))
	return &OneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for One.
func (c *OneClient) Delete() *OneDelete {
	mutation := newOneMutation(c.config, OpDelete)
	return &OneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OneClient) DeleteOne(o *One) *OneDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OneClient) DeleteOneID(id int) *OneDeleteOne {
	builder := c.Delete().Where(one.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OneDeleteOne{builder}
}

// Query returns a query builder for One.
func (c *OneClient) Query() *OneQuery {
	return &OneQuery{
		config: c.config,
	}
}

// Get returns a One entity by its id.
func (c *OneClient) Get(ctx context.Context, id int) (*One, error) {
	return c.Query().Where(one.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OneClient) GetX(ctx context.Context, id int) *One {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OneClient) Hooks() []Hook {
	return c.hooks.One
}

// TwoClient is a client for the Two schema.
type TwoClient struct {
	config
}

// NewTwoClient returns a client for the Two from the given config.
func NewTwoClient(c config) *TwoClient {
	return &TwoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `two.Hooks(f(g(h())))`.
func (c *TwoClient) Use(hooks ...Hook) {
	c.hooks.Two = append(c.hooks.Two, hooks...)
}

// Create returns a builder for creating a Two entity.
func (c *TwoClient) Create() *TwoCreate {
	mutation := newTwoMutation(c.config, OpCreate)
	return &TwoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Two entities.
func (c *TwoClient) CreateBulk(builders ...*TwoCreate) *TwoCreateBulk {
	return &TwoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Two.
func (c *TwoClient) Update() *TwoUpdate {
	mutation := newTwoMutation(c.config, OpUpdate)
	return &TwoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TwoClient) UpdateOne(t *Two) *TwoUpdateOne {
	mutation := newTwoMutation(c.config, OpUpdateOne, withTwo(t))
	return &TwoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TwoClient) UpdateOneID(id int) *TwoUpdateOne {
	mutation := newTwoMutation(c.config, OpUpdateOne, withTwoID(id))
	return &TwoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Two.
func (c *TwoClient) Delete() *TwoDelete {
	mutation := newTwoMutation(c.config, OpDelete)
	return &TwoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TwoClient) DeleteOne(t *Two) *TwoDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TwoClient) DeleteOneID(id int) *TwoDeleteOne {
	builder := c.Delete().Where(two.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TwoDeleteOne{builder}
}

// Query returns a query builder for Two.
func (c *TwoClient) Query() *TwoQuery {
	return &TwoQuery{
		config: c.config,
	}
}

// Get returns a Two entity by its id.
func (c *TwoClient) Get(ctx context.Context, id int) (*Two, error) {
	return c.Query().Where(two.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TwoClient) GetX(ctx context.Context, id int) *Two {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TwoClient) Hooks() []Hook {
	return c.hooks.Two
}
